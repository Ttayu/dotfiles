[[plugins]]
repo = "vim-denops/denops.vim"
on_event = 'CursorHold'

[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
  call pum#set_option('max_width', float2nr(&columns * 0.5))
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = ['VimEnter', 'CursorHold']
lua_source = '''
  require('nvim-treesitter.configs').setup {
    highlight = {
      enable = true,
      disable = {},
    },
  }
'''
hook_source = '''
  " set foldmethod=expr
  " set foldexpr=nvim_treesitter#foldexpr()
  " set foldlevel=99
'''

[[plugins]]
repo =  'RRethy/nvim-treesitter-endwise'
on_source = 'nvim-treesitter'
lua_source = '''
  require('nvim-treesitter.configs').setup {
    endwise = {
      enable = true,
    },
  }
'''

# カーソル位置のコンテキストに合わせてftを切り替える
[[plugins]]
repo = 'osyo-manga/vim-precious'
on_event = ['CursorMoved', 'InsertEnter']
depends = ['context_filetype.vim']

# カーソル位置のコンテキストのftを判断する
[[plugins]]
repo = 'Shougo/context_filetype.vim'

# ステータスラインの改造
[[plugins]]
repo = 'itchyny/lightline.vim'
on_event = 'VimEnter'
on_source = ['vim-gitbranch', 'lightline-lsp']
hook_add = '''
  source ~/.config/nvim/plugins/lightline.vim
'''

# lightlineにbuildin lspのstatusを表示する補助プラグイン
[[plugins]]
repo = 'spywhere/lightline-lsp'
on_source = ['lightline.vim']

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
on_event = ['BufRead']
depends = 'nvim-treesitter'
lua_source = '''
  require("indent_blankline").setup {
    space_char_blankline = " ",
    show_current_context = true,
    show_current_context_start = true,
  }
'''

[[plugins]]
repo = 'windwp/nvim-autopairs'
on_event = 'InsertEnter'
depends = ['pum.vim']
lua_source = '''
  require('nvim-autopairs').setup()

  local remap = vim.api.nvim_set_keymap
  local npairs = require('nvim-autopairs')

  -- skip it, if you use another global object
  _G.MUtils= {}

  vim.g.completion_confirm_key = ""
  MUtils.completion_confirm=function()
    if vim.api.nvim_eval('pum#visible()') ~= 0  then
      if vim.api.nvim_eval('pum#complete_info()')["selected"] >= 0 then
        return vim.api.nvim_eval('pum#map#confirm()')
      else
        vim.api.nvim_eval('pum#map#cancel()')
        return npairs.check_break_line_char()
      end
    else
      return npairs.check_break_line_char()
    end
  end

  remap('i' , '<CR>','v:lua.MUtils.completion_confirm()', {expr = true , noremap = true})
'''

[[plugins]]
repo = 'windwp/nvim-ts-autotag'
on_event = 'InsertEnter'
on_source = 'nvim-treesitter'
lua_source = '''
  require('nvim-treesitter.configs').setup{
    autotag = {
      enable = true,
    }
  }
  require('nvim-ts-autotag').setup()
'''

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
on_event = "BufReadPost"
lua_source = '''
  require('gitsigns').setup()
'''

# コメントアウト補助
[[plugins]]
repo = 'tyru/caw.vim'
on_map = ['<Plug>(caw:hatpos:toggle)', '<Plug>(caw:zeropos:toggle)']
hook_add = '''
  " 行の最初の文字の前にコメント文字をトグル
  nmap <Leader>c <Plug>(caw:hatpos:toggle)j
  vmap <Leader>c <Plug>(caw:hatpos:toggle)j
  " 行頭にコメントをトグル
  nmap <Leader>C <Plug>(caw:zeropos:toggle)j
  vmap <Leader>C <Plug>(caw:zeropos:toggle)j
'''

[[plugins]]
repo = 'phaazon/hop.nvim'
hook_add = '''
  nnoremap ff :HopWord<CR>
  nnoremap fl :HopLine<CR>
'''
lua_source = '''
  require'hop'.setup()
'''

[[plugins]]
repo = 'anuvyklack/nvim-keymap-amend'

[[plugins]]
repo = 'anuvyklack/pretty-fold.nvim'
lua_source = '''
  require('pretty-fold').setup()
'''

[[plugins]]
repo = 'anuvyklack/fold-preview.nvim'
lua_source = '''
  require('fold-preview').setup()
'''

# neosnippet
[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
on_source = ['ddu.nvim']
hook_source = '''
  source ~/.config/nvim/plugins/neosnippet.vim
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# git操作
[[plugins]]
repo = 'itchyny/vim-gitbranch'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'sindrets/diffview.nvim'
depends = "plenary.nvim"
hook_add = '''
  nnoremap [diffview] <Nop>
  nmap <Leader>g [diffview]
  nnoremap [diffview]d :DiffviewOpen<CR>
  nnoremap [diffview]h :DiffviewFileHistory<CR>
  xnoremap ,gh :DiffviewFileHistory<CR>
'''
lua_post_source = '''
  require('diffview').setup({
    use_icons = false,
    key_bindings = {
      view = {
        ['q'] = '<cmd>DiffviewClose<CR>',
      },
      file_panel = {
        ['q'] = '<cmd>DiffviewClose<CR>',
      },
      file_history_panel = {
        ['q'] = '<cmd>DiffviewClose<CR>',
      },
    }
  })
'''

[[plugins]]
repo = 'skywind3000/asyncrun.vim'
on_cmd = 'AsyncRun'
hook_add = '''
  let g:asyncrun_open = 6
  nnoremap <silent> <C-c> :AsyncStop <CR>
  augroup MyAsyncRun
    autocmd!
    autocmd FileType python nnoremap <silent> <C-q> :AsyncRun python -u %<CR>
    autocmd FileType python vnoremap <silent> <C-q> :%AsyncRun python -u<CR>
    command! -nargs=0 Pytest :AsyncRun pytest "%"
  augroup END
'''

# viewer for LSP symbols
[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
  let g:vista_close_on_jump = 1
  let g:vista#renderer#enable_icon = 1
  let g:vista_default_executive = 'nvim_lsp'
  nnoremap <silent> <leader>v :<C-u>Vista!!<CR>
  autocmd vimrc BufEnter * if (&filetype == 'vista' || &filetype == 'vista_kind') && winnr('$') == 1 | q | endif
'''

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''
